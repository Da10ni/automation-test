name: Branch Protection and Merge Rules

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

jobs:
  validate-merge-rules:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate branch naming and merge rules
        id: validate
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"
          
          echo "Source branch: $SOURCE_BRANCH"
          echo "Target branch: $TARGET_BRANCH"
          
          # Function to check if branch matches pattern
          check_branch_pattern() {
            local branch=$1
            local pattern=$2
            if [[ $branch =~ ^${pattern} ]]; then
              return 0
            else
              return 1
            fi
          }
          
          # Validate branch naming conventions
          VALID_BRANCH=false
          BRANCH_TYPE=""
          
          if check_branch_pattern "$SOURCE_BRANCH" "feature/"; then
            VALID_BRANCH=true
            BRANCH_TYPE="feature"
          elif check_branch_pattern "$SOURCE_BRANCH" "release/"; then
            VALID_BRANCH=true
            BRANCH_TYPE="release"
          elif check_branch_pattern "$SOURCE_BRANCH" "hotfix/"; then
            VALID_BRANCH=true
            BRANCH_TYPE="hotfix"
          fi
          
          if [ "$VALID_BRANCH" = false ]; then
            echo "‚ùå Invalid branch name: $SOURCE_BRANCH"
            echo "Branch must start with: feature/, release/, or hotfix/"
            echo "error=Invalid branch naming convention" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate merge rules based on branch type
          VALID_MERGE=false
          ERROR_MSG=""
          
          case $BRANCH_TYPE in
            "feature")
              if [ "$TARGET_BRANCH" = "develop" ]; then
                VALID_MERGE=true
              else
                ERROR_MSG="Feature branches can only merge into 'develop'. Current target: $TARGET_BRANCH"
              fi
              ;;
            "release")
              if [ "$TARGET_BRANCH" = "main" ]; then
                VALID_MERGE=true
              else
                ERROR_MSG="Release branches can only merge into 'main'. Current target: $TARGET_BRANCH"
              fi
              ;;
            "hotfix")
              if [ "$TARGET_BRANCH" = "main" ]; then
                VALID_MERGE=true
              else
                ERROR_MSG="Hotfix branches can only merge into 'main'. Current target: $TARGET_BRANCH"
              fi
              ;;
          esac
          
          if [ "$VALID_MERGE" = false ]; then
            echo "‚ùå Invalid merge target: $ERROR_MSG"
            echo "error=$ERROR_MSG" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Branch naming and merge rules validation passed"
          echo "branch_type=$BRANCH_TYPE" >> $GITHUB_OUTPUT

      - name: Comment on PR if validation fails
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const errorMsg = `${{ steps.validate.outputs.error }}`;
            const comment = `## ‚ùå Merge Request Validation Failed
            
            **Error:** ${errorMsg}
            
            ### Branch Naming Rules:
            - \`feature/*\` ‚Üí for new features (can only merge into \`develop\`)
            - \`release/*\` ‚Üí for preparing production releases (can only merge into \`main\`)
            - \`hotfix/*\` ‚Üí for urgent fixes in production (can only merge into \`main\`)
            
            ### Protected Branches:
            - \`main\` and \`develop\` are protected branches
            
            Please rename your branch or change the target branch according to the rules above.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  auto-merge-after-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if merge came from release or hotfix branch
        id: check_merge
        run: |
          # Get the commit message of the latest merge commit
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit message: $COMMIT_MSG"
          
          # Check if it's a merge from release or hotfix branch
          if [[ $COMMIT_MSG =~ "Merge pull request".+"release/" ]]; then
            echo "merge_type=release" >> $GITHUB_OUTPUT
            echo "Found merge from release branch"
          elif [[ $COMMIT_MSG =~ "Merge pull request".+"hotfix/" ]]; then
            echo "merge_type=hotfix" >> $GITHUB_OUTPUT
            echo "Found merge from hotfix branch"
          else
            echo "merge_type=none" >> $GITHUB_OUTPUT
            echo "No release or hotfix merge detected"
          fi

      - name: Auto-merge back to develop
        if: steps.check_merge.outputs.merge_type != 'none'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Checkout develop branch
          git checkout develop
          git pull origin develop
          
          # Merge main into develop
          if git merge main --no-ff -m "Auto-merge: Sync develop with main after ${{ steps.check_merge.outputs.merge_type }} merge"; then
            git push origin develop
            echo "‚úÖ Successfully auto-merged main into develop"
          else
            echo "‚ùå Merge conflict detected. Manual intervention required."
            # Create an issue for manual resolution
            gh issue create \
              --title "üö® Auto-merge failed: main ‚Üí develop" \
              --body "Auto-merge from main to develop failed due to conflicts after ${{ steps.check_merge.outputs.merge_type }} branch merge. Manual resolution required." \
              --label "merge-conflict" \
              --assignee "${{ github.actor }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge hotfix to active release branches
        if: steps.check_merge.outputs.merge_type == 'hotfix'
        run: |
          # Find all active release branches
          RELEASE_BRANCHES=$(git branch -r | grep 'origin/release/' | sed 's/origin\///' | xargs)
          
          if [ -z "$RELEASE_BRANCHES" ]; then
            echo "No active release branches found"
            exit 0
          fi
          
          echo "Found release branches: $RELEASE_BRANCHES"
          
          for branch in $RELEASE_BRANCHES; do
            echo "Processing branch: $branch"
            git checkout "$branch"
            git pull origin "$branch"
            
            if git merge main --no-ff -m "Auto-merge: Sync $branch with main after hotfix"; then
              git push origin "$branch"
              echo "‚úÖ Successfully auto-merged main into $branch"
            else
              echo "‚ùå Merge conflict in $branch. Creating issue for manual resolution."
              gh issue create \
                --title "üö® Auto-merge failed: main ‚Üí $branch" \
                --body "Auto-merge from main to $branch failed due to conflicts after hotfix merge. Manual resolution required." \
                --label "merge-conflict" \
                --assignee "${{ github.actor }}"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}